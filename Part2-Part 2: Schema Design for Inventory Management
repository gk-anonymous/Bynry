CREATE TABLE companies (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE TABLE warehouses (
    id SERIAL PRIMARY KEY,
    company_id INT NOT NULL REFERENCES companies(id),
    name TEXT NOT NULL
);

CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    sku TEXT UNIQUE NOT NULL,
    price DECIMAL(10, 2),
    is_bundle BOOLEAN DEFAULT FALSE
);

CREATE TABLE inventory (
    id SERIAL PRIMARY KEY,
    product_id INT NOT NULL REFERENCES products(id),
    warehouse_id INT NOT NULL REFERENCES warehouses(id),
    quantity INT NOT NULL,
    UNIQUE(product_id, warehouse_id)
);

CREATE TABLE inventory_logs (
    id SERIAL PRIMARY KEY,
    product_id INT NOT NULL REFERENCES products(id),
    warehouse_id INT NOT NULL REFERENCES warehouses(id),
    quantity_change INT NOT NULL,
    change_reason TEXT,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE suppliers (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    contact_email TEXT
);

CREATE TABLE supplier_products (
    supplier_id INT NOT NULL REFERENCES suppliers(id),
    product_id INT NOT NULL REFERENCES products(id),
    PRIMARY KEY(supplier_id, product_id)
);

CREATE TABLE product_bundles (
    bundle_id INT NOT NULL REFERENCES products(id),
    component_id INT NOT NULL REFERENCES products(id),
    quantity INT NOT NULL,
    PRIMARY KEY(bundle_id, component_id)
);


How do we handle unit conversions (kg vs pcs)?

Who should be recorded in the inventory logs (user ID)?
----------------------------------------------------------------

Indexes: Used for commonly filtered columns (SKU, FK references).

Normalization: Prevents duplication; relationships support flexibility.

Constraints: Foreign keys maintain referential integrity.

Scalability: Structure supports multiple warehouses, suppliers, and product types.
